{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to py-directus","text":"<p>Under development</p> <p>py-directus is a Python wrapper for asynchronous interaction with the Directus headless CMS API. It provides a convenient and easy-to-use interface for performing CRUD operations, querying data, and managing resources in Directus.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Asynchronous</li> <li>Login and authentication handling</li> <li>Reading and writing data from Directus collections</li> <li>Filtering, sorting, and searching data</li> <li>Aggregating data using aggregation operators</li> <li>Creating, updating, and deleting items in Directus collections</li> <li>Handling multiple users in the same session</li> </ul> <p>Dependencies:</p> <ul> <li> <p>Pydantic: This library leverages Pydantic for data validation and parsing. Pydantic is a powerful tool in Python for ensuring data integrity and handling data validation with ease.</p> </li> <li> <p>HTTPX: The library utilizes HTTPX, a fully featured HTTP client for Python 3, which provides sync and async APIs, and support for both HTTP/1.1 and HTTP/2.</p> </li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>You can install the library directly from pypi using pip:</p> Bash<pre><code>$ pip install py-directus\n</code></pre> <p>FastAPI support requires the installation of additional dependencies.  You can install them along others like so:</p> Bash<pre><code>$ pip install py-directus[FastAPI]\n</code></pre>"},{"location":"#quickstart","title":"Quickstart","text":"<p>Let's assume that after installing the library you would like to use it in your project. For example: you want to retrieve a user record from your Directus backend.</p>"},{"location":"#import","title":"Import","text":"<p>First, you would need to import the <code>Directus</code> client class like so:</p> Python<pre><code>from py_directus import Directus\n</code></pre>"},{"location":"#login","title":"Login","text":"<p>Login to the backend using the appropriate credentials:</p> Python<pre><code>directus = await Directus(\"https://example.com\", email=\"user@example.com\", password=\"secret\")\n\n# OR\n\ndirectus = await Directus(\"https://example.com\", token=\"static_token\")\n</code></pre>"},{"location":"#request","title":"Request","text":"<p>In case you were successfully identified by the system, then you can compose your request and retrieve the needed user record:</p> Python<pre><code>response = await directus.collection(\"directus_users\").filter(first_name=\"John\").read()\n\nuser_item = response.item\n\n# OR\n\nuser_item = (await directus.collection(\"directus_users\").filter(first_name=\"John\").read()).item\n</code></pre> <p>Notice that we gave the collection name as a string. This means that the end result will be formated as a regular dictionary. This library supports <code>Pydantic</code> models and provides you with basic models for each <code>Directus</code> collection.</p> Python<pre><code>from py_directus import DirectusUser\n\n...\n\nuser_item = (await directus.collection(DirectusUser).filter(first_name=\"John\").read()).item\n</code></pre> <p>In this case you will get your data as <code>Pydantic</code> model instances.</p> <p>Now you have a dictionary containing all the information of the found record.</p>"},{"location":"#logoutclose-connection","title":"Logout/Close Connection","text":"<p>After you have done everything you would like with the retrieved data you will have to log out of the Directus system and close the connection to free up resources:</p> Python<pre><code># Logout\nawait directus.logout()\n\n# Manually close connection\nawait directus.close_connection()\n</code></pre>"},{"location":"#full-script","title":"Full script","text":"main.py<pre><code>import asyncio\n\nfrom py_directus import DirectusUser, Directus\n\n\nasync def main():\n    directus = await Directus(\"https://example.com\", token=\"static_token\")\n\n    user_item = (await directus.collection(DirectusUser).filter(first_name=\"John\").read()).item\n\n    print(f\"Full Name: {user_item.last_name} {user_item.first_name}\")\n\n    # Logout\n    await directus.logout()\n\n    # Manually close connection\n    await directus.close_connection()\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"cache/","title":"Cache","text":"<p>We provide a basic caching mechanism for request results.</p>"},{"location":"cache/#usage","title":"Usage","text":"Python<pre><code>...\n\ndr_request = directus_client.collection(\"directus_users\").filter(first_name=\"John\").filter(last_name=\"Doe\")\n\n# Makes a request to the Directus server\nrqst_result = await dr_request.read(cache=True)\n\n# Subsequent requests with the same query will return the cached result\ndr_request = directus_client.collection(User).filter(first_name=\"John\", last_name=\"Doe\")\n\nrqst_result = await dr_request.read(cache=True)\n\n# If you call the `read` method again, but without the `cache` argument, and there is a not expired cache record, the record will be updated\nrqst_result = await dr_request.read()\n\n...\n</code></pre>"},{"location":"cache/#clear-cache","title":"Clear cache","text":"<p>The cache records expire after an hour.  When you try to get the cached result via the query key, it is completely deleted.</p>"},{"location":"cache/#client","title":"Client","text":"Python<pre><code>...\n\n# Clear records in client namespace\nawait directus_client.clear_cache()\n\n# Clear ALL cached results\nawait directus_client.clear_cache(True)\n\n...\n</code></pre>"},{"location":"cache/#request","title":"Request","text":"Python<pre><code>...\n\ndr_request = directus_client.collection(\"directus_users\").filter(first_name=\"John\").filter(last_name=\"Doe\")\n\n# Caches the result\nrqst_result = await dr_request.read(cache=True)\n\n...\n\n# Deletes the cached result\nawait dr_request.clear_cache()\n\n...\n</code></pre>"},{"location":"cheat_sheet/","title":"Cheat Sheet","text":""},{"location":"cheat_sheet/#authentication-and-session-handling","title":"Authentication and Session Handling","text":""},{"location":"cheat_sheet/#login","title":"Login","text":"<p>Create a Directus instance using email and password</p> Python<pre><code>from py_directus import Directus\n\ndirectus = await Directus(\"https://example.com\", email=\"user@example.com\", password=\"secret\")\n</code></pre> <p>Alternatively create a Directus instance using the static token</p> Python<pre><code>from py_directus import Directus\n\ndirectus = await Directus(\"https://example.com\", token=\"static_token\")\n</code></pre> <p>Another way is to use the <code>with</code> statement to automatically logout when the session ends</p> Python<pre><code>async with Directus(url, email, password) as directus:\n    # Manually login\n    await directus.login()\n    # Manually start cache\n    await directus.start_cache()\n    # do stuff\n\n# OR\n\nasync with await Directus(url, email, password) as directus:\n    # do stuff\n</code></pre>"},{"location":"cheat_sheet/#refresh-token","title":"Refresh Token","text":"<p>If you want to refresh the token you can use the <code>refresh</code> method</p> Python<pre><code>await directus.refresh()\n</code></pre>"},{"location":"cheat_sheet/#logout","title":"Logout","text":"<p>Logout from Directus</p> Python<pre><code>await directus.logout()\n</code></pre>"},{"location":"cheat_sheet/#multiple-users-in-the-same-session","title":"Multiple Users in the Same Session","text":"<p>You can use multiple users in the same session by creating a new Directus instance by passing the client object</p> Python<pre><code>connection = httpx.AsyncClient()\ndirectus1 = await Directus(url, token=token, connection=connection)\ndirectus2 = await Directus(url, email=email, password=password, connection=connection)\n</code></pre>"},{"location":"cheat_sheet/#collections","title":"Collections","text":"<p>There are two ways to set a collection, either by passing the collection name as a string or by passing the collection as a Pydantic model.</p> <p>Using the <code>collection</code> method you can pass the collection name as a string</p> Python<pre><code>directus.collection(\"directus_users\")\n</code></pre> <p>Or you can pass the collection as a <code>Pydantic</code> model</p> Python<pre><code>from typing import Optional\n\nfrom pydantic import ConfigDict\n\nfrom py_directus.models import DirectusModel\n\n\nclass User(DirectusModel):\n    id: Optional[str]\n    first_name: Optional[str]\n    last_name: Optional[str]\n    avatar: Optional[str]\n    description: Optional[str]\n    email: Optional[str]\n    role: Optional[str] | Optional[Role]\n    status: Optional[str]\n    title: Optional[str]\n    token: Optional[str]\n\n    model_config = ConfigDict(collection=\"directus_users\")\n\n\ndirectus.collection(User)\n</code></pre> <p>Don't forget to set the <code>collection</code> attribute in the <code>model_config</code> attribute</p> <p>If you go with the second option, you will get the responses as <code>Pydantic</code> models (auto parsing)</p> <p>The <code>collection</code> method returns a <code>DirectusRequest</code> object which is used to perform READ, CREATE, UPDATE and DELETE operations</p>"},{"location":"cheat_sheet/#reading-data","title":"Reading Data","text":"<p>When you have the <code>DirectusRequest</code> object you can use the <code>read</code> method to get the data. This will return a <code>DirectusResponse</code> object which contains the data.</p> <p>Imporatnt note: The <code>read</code> method must be awaited</p> Python<pre><code>await directus.collection(\"directus_users\").read()\n</code></pre>"},{"location":"cheat_sheet/#filtering","title":"Filtering","text":"<p>For an easy equality filter you can pass the field name and the value</p> Python<pre><code>await directus.collection(\"directus_users\").filter(first_name=\"John\").read()\n</code></pre> <p>To add multiple equality filters you can chain the <code>filter</code> method</p> Python<pre><code>await directus.collection(\"directus_users\")\n.filter(first_name=\"John\")\n.filter(last_name=\"Doe\").read()\n</code></pre> <p>Using it like this you chain the filters with <code>AND</code> operator</p>"},{"location":"cheat_sheet/#f-objects","title":"F objects","text":"<p>To define complex logic in filters, use the <code>F</code> object</p> Python<pre><code>from py_directus import F\n\nawait directus.collection(\"directus_users\")\n.filter(\n    (F(first_name=\"John\") | F(first_name=\"Jane\")) \n    &amp; F(last_name=\"Doe\")\n).read()\n</code></pre> <p>Important note: The <code>F</code> object does not support negation</p>"},{"location":"cheat_sheet/#sorting","title":"Sorting","text":"<p>You can sort the data by passing the field name to the <code>sort</code> method</p> Python<pre><code>await directus.collection(\"directus_users\").sort(\"first_name\", asc=True).read()\n</code></pre> <p>To add multiple sorting fields you can chain the <code>sort</code> method</p> Python<pre><code>await directus.collection(\"directus_users\")\n.sort(\"first_name\", asc=True)\n.sort(\"last_name\", asc=False).read()\n</code></pre>"},{"location":"cheat_sheet/#limiting","title":"Limiting","text":"<p>You can limit the data by passing the limit to the <code>limit</code> method</p> Python<pre><code>await directus.collection(\"directus_users\").limit(10).read()\n</code></pre>"},{"location":"cheat_sheet/#aggregation","title":"Aggregation","text":"<p>Aggregate the number of records in the query</p> Python<pre><code>await directus.collection(\"directus_users\").aggregate().read()\n\n# OR\n\nawait directus.collection(\"directus_users\").aggregate(count=\"*\").read()\n</code></pre> <p>To add multiple aggregates you can chain the <code>aggregate</code> method</p> Python<pre><code>await directus.collection(\"products\")\n.aggregate(countDistinct=\"id\")\n.aggregate(sum=\"price\").read()\n</code></pre>"},{"location":"cheat_sheet/#agg-objects","title":"Agg objects","text":"<p>You can aggregate the data by defining the needed aggregation with the <code>Agg</code> class and passing it to the <code>aggregate</code> method</p> Python<pre><code>from py_directus.aggregator import Agg\n\nagg_obj = Agg(operator=AggregationOperators.Count)\n\nawait directus.collection(\"directus_users\").aggregate(agg_obj).read()\n</code></pre> <p>In case you need only certain fields</p> Python<pre><code>from py_directus.aggregator import Agg\n\namount_agg = Agg(operator=AggregationOperators.Sum, fields=\"amount\")\n\nawait directus.collection(\"transactions\").aggregate(amount_agg).read()\n</code></pre> <p>The available aggregation operators are:</p> <ul> <li>Count</li> <li>CountDistinct</li> <li>CountAll (Only in GraphQL)</li> <li>Sum</li> <li>SumDistinct</li> <li>Average</li> <li>AverageDistinct</li> <li>Minimum</li> <li>Maximum</li> </ul>"},{"location":"cheat_sheet/#grouping","title":"Grouping","text":"<p>You can group the data by passing the field names to the <code>group_by</code> method</p> Python<pre><code>await directus.collection(\"directus_users\").group_by(\"first_name\", \"last_name\").read()\n</code></pre>"},{"location":"cheat_sheet/#searching","title":"Searching","text":"<p>You can search the data by passing the search term to the <code>search</code> method</p> Python<pre><code>await directus.collection(\"directus_users\").search(\"John\").read()\n</code></pre>"},{"location":"cheat_sheet/#selecting-fields","title":"Selecting Fields","text":"<p>You can select the fields you want to get by passing the field names to the <code>fields</code> method</p> Python<pre><code>await directus.collection(\"directus_users\").fields(\"first_name\", \"last_name\").read()\n</code></pre>"},{"location":"cheat_sheet/#getting-the-count-metadata","title":"Getting the Count Metadata","text":"<p>You can get the count of the data (total count and filtered count) calling <code>include_count</code></p> Python<pre><code>await directus.collection(\"directus_users\").include_count().read()\n</code></pre>"},{"location":"cheat_sheet/#crud","title":"CRUD","text":""},{"location":"cheat_sheet/#retrieving-items","title":"Retrieving items","text":"<p>After you call <code>read()</code> you get a <code>DirectusResponse</code> object which contains the data.</p> <ul> <li><code>item</code> for single item</li> <li><code>items</code> for multiple items</li> </ul> <p>Getting the data as a dictionary or a list of dictionaries</p> Python<pre><code>response = await directus.collection(\"directus_users\").read()\nprint(response.item[\"first_name\"])\nprint(response.items)\n</code></pre> <p>If you provide the <code>collection</code> method a <code>Pydantic</code> model you will get the data as a <code>Pydantic</code> object or a list of <code>Pydantic</code> objects</p> Python<pre><code>response = await directus.collection(User).read()\nprint(response.item.first_name)\nprint(response.items)\n</code></pre>"},{"location":"cheat_sheet/#converting-to-models-pydantic-or-to-dictionary","title":"Converting to Models (pydantic) or to Dictionary","text":"<p>Apart from the auto parsing, you can manually convert the data to a <code>Pydantic</code> model instance or to a dictionary using:</p> <ul> <li><code>item_as(User)</code> or <code>items_as(User)</code></li> <li><code>item_as_dict()</code> or <code>items_as_dict()</code></li> </ul> Python<pre><code>response = await directus.collection(\"directus_users\").read()\nprint(response.item_as(User))\n\nresponse = await directus.collection(User).read()\nprint(response.item_as_dict())\n</code></pre>"},{"location":"cheat_sheet/#creating-items","title":"Creating Items","text":"<p>The library does not support <code>Pydantic</code> models for creation, you have to pass a dictionary</p> <ul> <li>create(items: dict|List[dict])</li> </ul> Python<pre><code>await directus.collection(\"directus_users\").create({\n    \"first_name\": \"John\", \"last_name\": \"Doe\"\n})\n\n# OR\n\nawait directus.collection(\"directus_users\").create(\n    [\n        {\"first_name\": \"John\", \"last_name\": \"Doe\"},\n        {\"first_name\": \"Jane\", \"last_name\": \"Doe\"}\n    ]\n)\n</code></pre>"},{"location":"cheat_sheet/#updating-items","title":"Updating Items","text":"<p>The library do not support <code>Pydantic</code> models for updating, you have to pass a dictionary</p> <ul> <li><code>update(ids: str|int, items: dict)</code></li> <li><code>update(ids: List[str|int], items: List[dict])</code></li> </ul> Python<pre><code>await directus.collection(\"directus_users\").update(1, {\n    \"first_name\": \"Red\",\n    \"last_name\": \"John\"\n})\n\n# OR\n\nawait directus.collection(\"directus_users\").update(\n    [1, 2],\n    [\n        {\"first_name\": \"Jean-Luc\"},\n        {\"first_name\": \"Jane\", \"last_name\": \"Doe\"}\n    ]\n)\n</code></pre>"},{"location":"cheat_sheet/#deleting-items","title":"Deleting Items","text":"<ul> <li><code>delete(ids: str|int|List[str|int])</code></li> </ul> Python<pre><code>await directus.collection(\"directus_users\").delete(1)\n\n# OR\n\nawait directus.collection(\"directus_users\").delete([1, 2])\n</code></pre> <p>Supporting <code>Pydantic</code> models for <code>create</code>/<code>update</code>/<code>delete</code> item operations is shortly coming.</p>"},{"location":"realtime/","title":"Realtime","text":"<p>You have the ability to establish a bidirectional connection with a specific collection  via the <code>subscribe</code> method of the <code>DirectusRequest</code> class.</p>"},{"location":"realtime/#proxy-server","title":"Proxy server","text":"<p>Pass websocket messages through your backend to directus, thus not exposing the directus endpoint.</p>"},{"location":"realtime/#implementation","title":"Implementation","text":"<p>Pure python.</p> Python<pre><code>import json\nimport asyncio\nimport websockets\n\nfrom py_directus import Directus\n\n\nasync def directusToFrontend(ws, websocket):\n    async for message in ws:\n        data = json.loads(message)\n\n        if data.get(\"type\", \"\") == \"ping\":\n            pong_data = json.dumps({\n                \"type\": \"pong\"\n            })\n\n            await ws.send(pong_data)\n        else:\n            await websocket.send_text(message)\n\n\nasync def frontendToDirectus(ws, websocket):\n    async for message in websocket.iter_text():\n        await ws.send(message)\n    await ws.close()\n\n\nasync def ws_proxy(websocket):\n    \"\"\"\n    Called whenever a new connection is made to the server\n    \"\"\"\n\n    directus_client = await Directus(DIRECTUS_URL, token=ACCESS_TOKEN)\n\n    try:\n        (auth_data, ws) = await directus_client.collection(\"test_messages\").filter(status=\"published\").subscribe(WS_URL)\n\n        taskA = asyncio.create_task(directusToFrontend(ws, websocket))\n        taskB = asyncio.create_task(frontendToDirectus(ws, websocket))\n\n        await taskA\n        await taskB\n    except:\n        await websocket.close()\n\n\nif __name__ == \"__main__\":\n    DIRECTUS_URL = \"https://some-where.xyz\"\n    WS_URL = \"ws://some-where.xyz/websocket\"\n    ACCESS_TOKEN = \"vTUMahtspcJ1PGpXccIttSzKkveeXaC7\";\n\n    start_server = websockets.serve(ws_proxy, \"\", 8001)\n\n    asyncio.get_event_loop().run_until_complete(start_server)\n    asyncio.get_event_loop().run_forever()\n</code></pre> <p>FastAPI.</p> Python<pre><code>import json\nimport asyncio\nimport websockets\n\nfrom starlette.websockets import WebSocket, WebSocketDisconnect\nfrom fastapi import FastAPI\n\nfrom py_directus import Directus\n\n\napp = FastAPI()\n\n\nasync def directusToFrontend(ws, websocket):\n    async for message in ws:\n        data = json.loads(message)\n\n        if data.get(\"type\", \"\") == \"ping\":\n            pong_data = json.dumps({\n                \"type\": \"pong\"\n            })\n\n            await ws.send(pong_data)\n        else:\n            await websocket.send_text(message)\n\n\nasync def frontendToDirectus(ws, websocket):\n    async for message in websocket.iter_text():\n        await ws.send(message)\n    await ws.close()\n\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n\n    directus_url = \"https://some-where.xyz\"\n    ws_uri = \"ws://some-where.xyz/websocket\"\n    access_token = \"vTUMahtspcJ1PGpXccIttSzKkveeXaC7\";\n\n    directus_client = await Directus(directus_url, token=access_token)\n\n    try:\n        (auth_data, ws) = await directus_client.collection(\"test_messages\").filter(status=\"published\").subscribe(ws_uri)\n\n        taskA = asyncio.create_task(directusToFrontend(ws, websocket))\n        taskB = asyncio.create_task(frontendToDirectus(ws, websocket))\n\n        await taskA\n        await taskB\n    except:\n        await websocket.close()\n</code></pre>"},{"location":"translations/","title":"Custom Translations","text":"<p>We provide the <code>get_translations</code> and <code>create_translations</code> methods of the <code>Directus</code> class client  for you to retrieve and create new translation records on the <code>Directus</code> backend.</p>"},{"location":"translations/#retrieve-translations","title":"Retrieve Translations","text":"<p>Retrieving translation records</p> Python<pre><code>...\n# A list of translation records in dictionary format\ntranslations = await directus.get_translations()\n\n# A dictionary of translation records grouped by the `key` field\n# {\n#     \"&lt;key&gt;\": {\n#         \"&lt;language&gt;\": \"&lt;value&gt;\"\n#     }\n# }\ntranslations = await directus.get_translations(clean=True)\n...\n</code></pre> <p>Note: The automatic retrieval of all Directus translation records is supported by the <code>async_init</code> function  when the <code>load_translations</code> argument is set to <code>True</code>.  You can access the translations from the <code>pydirectus.translations</code> global. The global is in <code>clean</code> format.</p>"},{"location":"translations/#create-translations","title":"Create Translations","text":"<p>Creating a new translation record</p> Python<pre><code>...\n# Register a translation record for the given values (language: 'en-GB')\ndirectus_response = await directus.create_translations(\"some\")\n\n# Register a translation record for the given values with specific language\ndirectus_response = await directus.create_translations(tuple([\"some\", \"el-GR\"]))\n...\n</code></pre>"},{"location":"FastAPI_Support/","title":"Usage","text":"<p>In development</p>"},{"location":"FastAPI_Support/#syntax","title":"Syntax","text":"<p>Current use syntax</p> Python<pre><code>from fastapi import Request, Depends\nfrom py_directus import Directus\nfrom py_directus.fast_api.auth import directus_auth, assert_role\nfrom py_directus.fast_api.utils import Roles\n\n\n@app.get(\"/\")\n@assert_role([Roles.ADMINISTRATOR])\nasync def root(request: Request, directus: Directus = Depends(directus_auth)):\n    # This path operation function is accessed when authenticated user \n    # has the role of `administrator` in directus\n    return {\"message\": \"Hello World\"}\n</code></pre>"},{"location":"FastAPI_Support/#changes","title":"Changes","text":"<p>Some functionality of the <code>RoleToID</code> and <code>Directus</code> classes has been moved to their <code>__await__</code> method,  so the globals (<code>directus_admin</code> and <code>role_to_id</code>) of the <code>fast_api</code> module must be awaited before usage.</p> <p>Previous syntax</p> Python<pre><code>...\n\nroles = directus_admin.collection(Role).read().items\nself.roles = {role.name: role.id for role in roles}\n\n...\n\nrole_id = role_to_id(role)\n\n...\n</code></pre> <p>Current syntax Python<pre><code>...\n\n# The global does not perform the login automatically, \n# so we must do it manually by awaiting\nawait directus_admin\nroles = await directus_admin.collection(Role).read()\nself.roles = {role.name: role.id for role in roles.items}\n\n...\n\n# The global does not fetch roles from Directus automatically, \n# so we must do it manually by awaiting\nawait role_to_id\nrole_id = role_to_id(role)\n\n...\n</code></pre></p>"},{"location":"FastAPI_Support/lifespan/","title":"Lifespan","text":"<p>In development</p> <p>We provide a predefined lifespan context manager that you can use to initialize and close  some globaly available Directus clients.</p> Python<pre><code>import os\n\nfrom dotenv import load_dotenv\n\nfrom fastapi import FastAPI\n\nfrom py_directus.fast_api import globals as py_dr_glob_vars\nfrom py_directus.fast_api.lifespan import lifespan\n\n\nload_dotenv()\n\ndirectus_url = os.environ.get('DIRECTUS_URL')\ndirectus_admin_token = os.environ.get('DIRECTUS_ADMIN_TOKEN')\n\n\napp = FastAPI(lifespan=lifespan(directus_base_url=directus_url, directus_admin_token=directus_admin_token))\n\n\n@app.get(\"/predict\")\nasync def predict(x: float):\n    user = await py_dr_glob_vars.directus_admin.user\n    return {\"user\": user}\n</code></pre> <p>In case you have already defined your own lifespan context manager, then you can wrap our lifespan around yours like in the following example:</p> Python<pre><code>import os\n\nfrom dotenv import load_dotenv\n\nfrom contextlib import asynccontextmanager\n\nfrom fastapi import FastAPI\n\nfrom py_directus import init_directus, globals as py_dr_glob_vars\n\n\nload_dotenv()\n\ndirectus_url = os.environ.get('DIRECTUS_URL')\ndirectus_admin_token = os.environ.get('DIRECTUS_ADMIN_TOKEN')\n\n\ndef fake_answer_to_everything_ml_model(x: float):\n    return x * 42\n\n\nml_models = {}\n\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    # Load the ML model\n    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n    yield\n    # Clean up the ML models and release the resources\n    ml_models.clear()\n\n\napp = FastAPI(lifespan=lifespan)\n\n# Here we wrap app's lifespan context manager with our own\ninit_directus(app, directus_base_url=directus_url, directus_admin_token=directus_admin_token)\n\n\n@app.get(\"/predict\")\nasync def predict(x: float):\n    result = ml_models[\"answer_to_everything\"](x)\n    user = await py_dr_glob_vars.directus_admin.user\n    return {\"result\": result, \"user\": user}\n</code></pre> <p>ALTERNATIVE</p> <p>Used in case we need to wrap a specific context manager within app's lifespan.</p> Python<pre><code>import os\n\nfrom dotenv import load_dotenv\n\nfrom contextlib import asynccontextmanager\n\nfrom fastapi import FastAPI\n\nfrom py_directus.fast_api import globals as py_dr_glob_vars\nfrom py_directus.fast_api.lifespan import lifespan as py_dr_lifespan\n\n\nload_dotenv()\n\ndirectus_url = os.environ.get('DIRECTUS_URL')\ndirectus_admin_token = os.environ.get('DIRECTUS_ADMIN_TOKEN')\n\n\ndef fake_answer_to_everything_ml_model(x: float):\n    return x * 42\n\n\nml_models = {}\n\n\n@py_dr_lifespan(directus_base_url=directus_url, directus_admin_token=directus_admin_token)\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    # Load the ML model\n    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n    yield\n    # Clean up the ML models and release the resources\n    ml_models.clear()\n\n\napp = FastAPI(lifespan=lifespan)\n\n\n@app.get(\"/predict\")\nasync def predict(x: float):\n    result = ml_models[\"answer_to_everything\"](x)\n    user = await py_dr_glob_vars.directus_admin.user\n    return {\"result\": result, \"user\": user}\n</code></pre>"},{"location":"examples/","title":"Usage","text":"<p>Note</p> <p>Examples are not included with the <code>pypi</code> package, so you will have to download them separately and execute in a virtual environment.</p>"},{"location":"examples/#execution","title":"Execution","text":"<p>Run individual examples as such:</p> Bash<pre><code>python -m examples.&lt;example_file_name&gt;\n</code></pre>"},{"location":"examples/#currently-available","title":"Currently available","text":"<ul> <li>request</li> </ul> <p>Retrieves a user record from <code>Directus</code> whith the collection being defined as a string and as a <code>Pydantic</code> model class.</p> <ul> <li>request_two</li> </ul> <p>Same as the <code>request</code> example, but uses the <code>Directus</code> client as context manager.</p> <ul> <li>filters</li> </ul> <p>A demonstration of the capabilities that the <code>F</code> provides.</p> <ul> <li>files</li> </ul> <p>Upload a file from local storage to <code>Directus</code> and retireve a list of currently saved files.</p> <ul> <li>file_download</li> </ul> <p>Download a file from <code>Directus</code> by its id.</p>"},{"location":"models/","title":"Declaration","text":"<p>Subclass the <code>DirectusModel</code> to define your custom <code>pydantic</code> models.</p> Python<pre><code>from typing import List, Union\n\nfrom pydantic import ConfigDict\nfrom py_directus.models import DirectusModel\n\nclass Item(DirectusModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n    model_config = ConfigDict(collection=\"items\")\n</code></pre> <p>Old implementation. It is still supported, but deprecated.</p> Python<pre><code>from typing import List, Union\n\nfrom py_directus.models import DirectusModel\n\nclass Item(DirectusModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n    class Config:\n        collection = \"item\"\n</code></pre> <p>Note</p> <p>In case you don't define the <code>collection</code> attribute in the <code>model_config</code> attribute (or <code>Config</code> class),  py-directus will use a munged version of the class name: <code>CamelCase</code> becomes <code>camel_case</code>.</p>"},{"location":"request/","title":"Filters","text":""},{"location":"request/#simple-filters","title":"Simple Filters","text":"Python<pre><code>from py_directus import F\n\n# age equals 23\nF(age=23)\n\n# age greater than 23\nF(age__gt=23)\n\n# age greater than and equal to 23\nF(name__contains=\"John\", age__gt=23)\n</code></pre>"},{"location":"request/#combine-filters","title":"Combine filters","text":"Python<pre><code># age equals 23 and name equals John\nF(age=23) &amp; F(name=\"John\")\n\n# age equals 23 or name equals John\nF(age=23) | F(name=\"John\")\n\n# age equals 23 and (name equals John or name equals Jane)\nF(age=23) &amp; (F(name=\"John\") | F(name=\"Jane\"))\n</code></pre>"},{"location":"request/#syntax","title":"Syntax","text":""},{"location":"request/#filter-operators","title":"Filter Operators","text":"<p>As you can see in the examples above, to use a filter you need to create an instance of the <code>F</code> class. The <code>F</code> class takes keyword arguments, where the key is the field name and operator, and the value is the filter value.</p> <p>If you don't specify an operator, the <code>__eq</code> operator will be used.</p> <p>See the full list of operators here.</p>"},{"location":"request/#logical-operators","title":"Logical Operators","text":"<p>The allowed logical operators are <code>&amp;</code> (and) and <code>|</code> (or). You can NOT use <code>~</code> (not) to negate a filter as it is not supported by directus.</p> <p>Multiple values for the same filter will be combined with the <code>AND</code> operator.</p> Python<pre><code># age greater than and equal to 23\nF(name__contains=\"John\", age__gt=23)\n</code></pre> <p>In order to combine multiple filters and nest them, you can use the logical operators.</p> Python<pre><code># age equals 23 and (name equals John or name equals Jane)\nF(age=23) &amp; (F(name=\"John\") | F(name=\"Jane\"))\n</code></pre>"},{"location":"request/#debugging-your-filters","title":"Debugging your filters","text":"<p>In order to debug a filter, you can use the <code>get_explanation</code> method.</p> Python<pre><code>from py_directus import F\n# age equals 23 and (name equals John or name equals Jane)\nmy_filter = F(age=23) &amp; (F(name=\"John\") | F(name=\"Jane\"))\nprint(my_filter.get_explanation(tab_char='| '))\n</code></pre> <p>The output will be a string that you can use to debug your filter.</p> Text Only<pre><code>| age Equals 23\nAND\n| | name Equals John\n| OR\n| | name Equals Jane\n</code></pre> <p>Also, you can use the <code>print_explanation</code> method to get the explanation using the <code>rich</code> library with nice colors!</p> Python<pre><code>my_filter.print_explanation(tab_char='| ')\n</code></pre>"},{"location":"request/#raw-output","title":"Raw output","text":"<p>If you want to get the json output of the filter, you can use the <code>query</code> property.</p> Python<pre><code>print(my_filter.query)\n</code></pre> <p>The output will be a dictionary that you can use to debug your filter.</p> JSON<pre><code>{\n  \"_and\": [\n    {\n      \"age\": {\n        \"_eq\": 23\n      }\n    },\n    {\n      \"_or\": [\n        {\n          \"name\": {\n            \"_eq\": \"John\"\n          }\n        },\n        {\n          \"name\": {\n            \"_eq\": \"Jane\"\n          }\n        }\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"request/#full-list-of-operators","title":"Full list of operators","text":"Operator Description <code>__eq</code> Equals <code>__neq</code> Doesn't equal <code>__lt</code> Less than <code>__lte</code> Less than or equal to <code>__gt</code> Greater than <code>__gte</code> Greater than or equal to <code>__in</code> Is one of <code>__nin</code> Is not one of <code>__null</code> Is null <code>__nnull</code> Isn't null <code>__contains</code> Contains <code>__icontains</code> Contains case-insensitive <code>__ncontains</code> Doesn't contain <code>__starts_with</code> Starts with <code>__istarts_with</code> Starts with case-insensitive <code>__nstarts_with</code> Doesn't start with <code>__nistarts_with</code> Doesn't start with case-insensitive <code>__ends_with</code> Ends with <code>__iends_with</code> Ends with case-insensitive <code>__nends_with</code> Doesn't end with <code>__niends_with</code> Doesn't end with case-insensitive <code>__between</code> Is between <code>__nbetween</code> Isn't between <code>__empty</code> Is empty <code>__nempty</code> Isn't empty <code>__intersects</code> Intersects <code>__nintersects</code> Doesn't intersect <code>__intersects_bbox</code> Intersects Bounding box <code>__nintersects_bbox</code> Doesn't intersect bounding box"},{"location":"request/aggregation/","title":"Aggregators","text":"Python<pre><code>Agg(\"*__count\")\n\n# OR\n\nAgg(count=\"*\")\n\n# OR\n\nAgg(operator=AggregationOperators.Count, fields=\"*\")\n</code></pre> <p>Aggregate the number of records in the query</p> Python<pre><code>await directus.collection(\"directus_users\").aggregate().read()\n\n# OR\n\nawait directus.collection(\"directus_users\").aggregate(count=\"*\").read()\n</code></pre> <p>To add multiple aggregates you can chain the <code>aggregate</code> method</p> Python<pre><code>await directus.collection(\"products\")\n.aggregate(countDistinct=\"id\")\n.aggregate(sum=\"price\").read()\n</code></pre>"},{"location":"request/aggregation/#agg-object","title":"Agg object","text":""},{"location":"request/aggregation/#usage","title":"Usage","text":"<p>You can aggregate the data by defining the needed aggregation with the <code>Agg</code> class and passing it to the <code>aggregate</code> method</p> Python<pre><code>from py_directus.aggregator import Agg\n\nagg_obj = Agg()  # defaults to count='*'\n\nawait directus.collection(\"directus_users\").aggregate(agg_obj).read()\n</code></pre> <p>In case you need only certain fields</p> Python<pre><code>from py_directus.aggregator import Agg\nfrom py_directus.operators import AggregationOperators\n\namount_agg = Agg(operator=AggregationOperators.Sum, fields=\"amount\")\n\nawait directus.collection(\"transactions\").aggregate(amount_agg).read()\n</code></pre>"},{"location":"request/aggregation/#complex-aggregation","title":"Complex Aggregation","text":"Python<pre><code>from py_directus.aggregator import Agg\nfrom py_directus.operators import AggregationOperators\n\ncomplex_aggregate = (\n    Agg(operator=AggregationOperators.Count, fields=['id', 'name']) \n    &amp; Agg(operator=AggregationOperators.Sum, fields='amount')\n)\n\nawait directus.collection(\"transactions\").aggregate(complex_aggregate).read()\n</code></pre> <p>Result</p> Text Only<pre><code>{'count': {'id': 184, 'email': 8}, 'sum': {'id': 1.7976931348623157e+308}}\n</code></pre>"},{"location":"request/aggregation/#full-list-of-operators","title":"Full list of operators","text":"Operator Alt Description <code>Count</code> <code>count</code> Count <code>CountDistinct</code> <code>countDistinct</code> Count Distinctly <code>CountAll</code> <code>countAll</code> Count All (Only in GraphQL) <code>Sum</code> <code>sum</code> Sum <code>SumDistinct</code> <code>sumDistinct</code> Sum Distinctly <code>Average</code> <code>average</code> Average <code>AverageDistinct</code> <code>averageDistinct</code> Average Distinctly <code>Minimum</code> <code>minimum</code> Minimum <code>Maximum</code> <code>maximum</code> Maximum"},{"location":"request/batching/","title":"Batching Requests","text":"<p>If you need to make multiple independent requests to the Directus server, you can use <code>async.gather(*requests)</code>, or set the flag <code>as_task</code> of the <code>read</code>, <code>create</code>, <code>update</code>, <code>delete</code> methods.</p> <p>Then call <code>await directus.gather()</code> to execute the batch.</p> <p>When <code>as_task</code> flag is used the request is added to a list of tasks that will be executed when <code>await directus.gather()</code> is called.</p> Python<pre><code>import asyncio\n\nfrom py_directus import Directus\n\n\nasync def with_async_gather(directus: Directus):\n    tasks = [\n        directus.collection(\"directus_users\").read(),\n        directus.collection(\"directus_files\").read(),\n    ]\n    results = await asyncio.gather(*tasks)\n    result_1 = results[0]\n    result_2 = results[1]\n    print(result_1.items, result_2.items)\n\n\nasync def with_as_task(directus: Directus):\n    result_1 = await directus.collection(\"directus_users\").read(as_task=True)\n    result_2 = await directus.collection(\"directus_files\").read(as_task=True)\n\n    await directus.gather()\n    print(result_1.items, result_2.items)\n</code></pre> <p>IMPORTANT: cache and as_task cannot be used together, if both are set to True, the cache will take precedence and the request will be awaited.</p>"}]}